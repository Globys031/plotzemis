package routes

import (
	"github.com/gin-gonic/gin"
)

// Sukurti duomenis apie miesta
type CreateBody struct {
	City     string `json:""`
	District string `json:""`
}

// Will get post based on what ID the GUI returns
type GetBody struct {
	City     string `json:""`
	District string `json:""`
}

type ListGetBody struct {
	City     string `json:""`
	District string `json:""`
}

func (svc *AuthService) Create(ctx *gin.Context) {

}

func (svc *AuthService) Read(ctx *gin.Context) {

}

func (svc *AuthService) Update(ctx *gin.Context) {

}

func (svc *AuthService) Remove(ctx *gin.Context) {

}

func (svc *AuthService) GetList(ctx *gin.Context) {

}

///////////////////////////////
// Helper functions
///////////////////////////////

// Meant to validate whether the data provided by frontend is of correct format
func validateDataFormat(user *RegisterRequestBody, svc *AuthService) error {
	validate := validator.New()
	validate.RegisterValidation("role", validateRole)

	fmt.Println(user.Email)

	err := validate.Struct(user)
	if err != nil {
		// this check is only needed when your code could produce
		// an invalid value for validation such as interface with nil
		// value most including myself do not usually have code like this.
		if _, ok := err.(*validator.InvalidValidationError); ok {
			fmt.Println(err)
		}
	}
	return err
}